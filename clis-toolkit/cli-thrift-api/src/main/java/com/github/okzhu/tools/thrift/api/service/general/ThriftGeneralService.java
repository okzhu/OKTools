/**
 * Autogenerated by Thrift Compiler (0.13.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.github.okzhu.tools.thrift.api.service.general;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-16")
public class ThriftGeneralService {

    public interface Iface {

        public ThriftGeneralResponse send(ThriftGeneralRequest req) throws com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException, org.apache.thrift.TException;

        public java.util.List<ThriftGeneralResponse> listSend(java.util.List<ThriftGeneralRequest> req) throws com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException, org.apache.thrift.TException;

        public void voidSend(ThriftGeneralRequest req) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void send(ThriftGeneralRequest req, org.apache.thrift.async.AsyncMethodCallback<ThriftGeneralResponse> resultHandler) throws org.apache.thrift.TException;

        public void listSend(java.util.List<ThriftGeneralRequest> req, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftGeneralResponse>> resultHandler) throws org.apache.thrift.TException;

        public void voidSend(ThriftGeneralRequest req, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public ThriftGeneralResponse send(ThriftGeneralRequest req) throws com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException, org.apache.thrift.TException {
            send_send(req);
            return recv_send();
        }

        public void send_send(ThriftGeneralRequest req) throws org.apache.thrift.TException {
            send_args args = new send_args();
            args.setReq(req);
            sendBase("send", args);
        }

        public ThriftGeneralResponse recv_send() throws com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException, org.apache.thrift.TException {
            send_result result = new send_result();
            receiveBase(result, "send");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "send failed: unknown result");
        }

        public java.util.List<ThriftGeneralResponse> listSend(java.util.List<ThriftGeneralRequest> req) throws com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException, org.apache.thrift.TException {
            send_listSend(req);
            return recv_listSend();
        }

        public void send_listSend(java.util.List<ThriftGeneralRequest> req) throws org.apache.thrift.TException {
            listSend_args args = new listSend_args();
            args.setReq(req);
            sendBase("listSend", args);
        }

        public java.util.List<ThriftGeneralResponse> recv_listSend() throws com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException, org.apache.thrift.TException {
            listSend_result result = new listSend_result();
            receiveBase(result, "listSend");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listSend failed: unknown result");
        }

        public void voidSend(ThriftGeneralRequest req) throws org.apache.thrift.TException {
            send_voidSend(req);
            recv_voidSend();
        }

        public void send_voidSend(ThriftGeneralRequest req) throws org.apache.thrift.TException {
            voidSend_args args = new voidSend_args();
            args.setReq(req);
            sendBase("voidSend", args);
        }

        public void recv_voidSend() throws org.apache.thrift.TException {
            voidSend_result result = new voidSend_result();
            receiveBase(result, "voidSend");
            return;
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void send(ThriftGeneralRequest req, org.apache.thrift.async.AsyncMethodCallback<ThriftGeneralResponse> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            send_call method_call = new send_call(req, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class send_call extends org.apache.thrift.async.TAsyncMethodCall<ThriftGeneralResponse> {
            private ThriftGeneralRequest req;

            public send_call(ThriftGeneralRequest req, org.apache.thrift.async.AsyncMethodCallback<ThriftGeneralResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.req = req;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("send", org.apache.thrift.protocol.TMessageType.CALL, 0));
                send_args args = new send_args();
                args.setReq(req);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public ThriftGeneralResponse getResult() throws com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_send();
            }
        }

        public void listSend(java.util.List<ThriftGeneralRequest> req, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftGeneralResponse>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            listSend_call method_call = new listSend_call(req, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class listSend_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ThriftGeneralResponse>> {
            private java.util.List<ThriftGeneralRequest> req;

            public listSend_call(java.util.List<ThriftGeneralRequest> req, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftGeneralResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.req = req;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listSend", org.apache.thrift.protocol.TMessageType.CALL, 0));
                listSend_args args = new listSend_args();
                args.setReq(req);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<ThriftGeneralResponse> getResult() throws com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_listSend();
            }
        }

        public void voidSend(ThriftGeneralRequest req, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            voidSend_call method_call = new voidSend_call(req, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class voidSend_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private ThriftGeneralRequest req;

            public voidSend_call(ThriftGeneralRequest req, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.req = req;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("voidSend", org.apache.thrift.protocol.TMessageType.CALL, 0));
                voidSend_args args = new voidSend_args();
                args.setReq(req);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("send", new send());
            processMap.put("listSend", new listSend());
            processMap.put("voidSend", new voidSend());
            return processMap;
        }

        public static class send<I extends Iface> extends org.apache.thrift.ProcessFunction<I, send_args> {
            public send() {
                super("send");
            }

            public send_args getEmptyArgsInstance() {
                return new send_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public send_result getResult(I iface, send_args args) throws org.apache.thrift.TException {
                send_result result = new send_result();
                try {
                    result.success = iface.send(args.req);
                } catch (com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class listSend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listSend_args> {
            public listSend() {
                super("listSend");
            }

            public listSend_args getEmptyArgsInstance() {
                return new listSend_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public listSend_result getResult(I iface, listSend_args args) throws org.apache.thrift.TException {
                listSend_result result = new listSend_result();
                try {
                    result.success = iface.listSend(args.req);
                } catch (com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class voidSend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, voidSend_args> {
            public voidSend() {
                super("voidSend");
            }

            public voidSend_args getEmptyArgsInstance() {
                return new voidSend_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public voidSend_result getResult(I iface, voidSend_args args) throws org.apache.thrift.TException {
                voidSend_result result = new voidSend_result();
                iface.voidSend(args.req);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("send", new send());
            processMap.put("listSend", new listSend());
            processMap.put("voidSend", new voidSend());
            return processMap;
        }

        public static class send<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, send_args, ThriftGeneralResponse> {
            public send() {
                super("send");
            }

            public send_args getEmptyArgsInstance() {
                return new send_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<ThriftGeneralResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<ThriftGeneralResponse>() {
                    public void onComplete(ThriftGeneralResponse o) {
                        send_result result = new send_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        send_result result = new send_result();
                        if (e instanceof com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException) {
                            result.e = (com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, send_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftGeneralResponse> resultHandler) throws org.apache.thrift.TException {
                iface.send(args.req, resultHandler);
            }
        }

        public static class listSend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listSend_args, java.util.List<ThriftGeneralResponse>> {
            public listSend() {
                super("listSend");
            }

            public listSend_args getEmptyArgsInstance() {
                return new listSend_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftGeneralResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftGeneralResponse>>() {
                    public void onComplete(java.util.List<ThriftGeneralResponse> o) {
                        listSend_result result = new listSend_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        listSend_result result = new listSend_result();
                        if (e instanceof com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException) {
                            result.e = (com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, listSend_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftGeneralResponse>> resultHandler) throws org.apache.thrift.TException {
                iface.listSend(args.req, resultHandler);
            }
        }

        public static class voidSend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, voidSend_args, Void> {
            public voidSend() {
                super("voidSend");
            }

            public voidSend_args getEmptyArgsInstance() {
                return new voidSend_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        voidSend_result result = new voidSend_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        voidSend_result result = new voidSend_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, voidSend_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.voidSend(args.req, resultHandler);
            }
        }

    }

    public static class send_args implements org.apache.thrift.TBase<send_args, send_args._Fields>, java.io.Serializable, Cloneable, Comparable<send_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("send_args");

        private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new send_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new send_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        ThriftGeneralRequest req; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            REQ((short) 1, "req");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // REQ
                        return REQ;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftGeneralRequest.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_args.class, metaDataMap);
        }

        public send_args() {
        }

        public send_args(
                ThriftGeneralRequest req) {
            this();
            this.req = req;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public send_args(send_args other) {
            if (other.isSetReq()) {
                this.req = new ThriftGeneralRequest(other.req);
            }
        }

        public send_args deepCopy() {
            return new send_args(this);
        }

        @Override
        public void clear() {
            this.req = null;
        }

        @org.apache.thrift.annotation.Nullable
        public ThriftGeneralRequest getReq() {
            return this.req;
        }

        public send_args setReq(@org.apache.thrift.annotation.Nullable ThriftGeneralRequest req) {
            this.req = req;
            return this;
        }

        public void unsetReq() {
            this.req = null;
        }

        /** Returns true if field req is set (has been assigned a value) and false otherwise */
        public boolean isSetReq() {
            return this.req != null;
        }

        public void setReqIsSet(boolean value) {
            if (!value) {
                this.req = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case REQ:
                    if (value == null) {
                        unsetReq();
                    } else {
                        setReq((ThriftGeneralRequest) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case REQ:
                    return getReq();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case REQ:
                    return isSetReq();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof send_args)
                return this.equals((send_args) that);
            return false;
        }

        public boolean equals(send_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_req = true && this.isSetReq();
            boolean that_present_req = true && that.isSetReq();
            if (this_present_req || that_present_req) {
                if (!(this_present_req && that_present_req))
                    return false;
                if (!this.req.equals(that.req))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetReq()) ? 131071 : 524287);
            if (isSetReq())
                hashCode = hashCode * 8191 + req.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(send_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReq()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, other.req);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("send_args(");
            boolean first = true;

            sb.append("req:");
            if (this.req == null) {
                sb.append("null");
            } else {
                sb.append(this.req);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (req != null) {
                req.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class send_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public send_argsStandardScheme getScheme() {
                return new send_argsStandardScheme();
            }
        }

        private static class send_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<send_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, send_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // REQ
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.req = new ThriftGeneralRequest();
                                struct.req.read(iprot);
                                struct.setReqIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, send_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.req != null) {
                    oprot.writeFieldBegin(REQ_FIELD_DESC);
                    struct.req.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class send_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public send_argsTupleScheme getScheme() {
                return new send_argsTupleScheme();
            }
        }

        private static class send_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<send_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, send_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetReq()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetReq()) {
                    struct.req.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, send_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.req = new ThriftGeneralRequest();
                    struct.req.read(iprot);
                    struct.setReqIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class send_result implements org.apache.thrift.TBase<send_result, send_result._Fields>, java.io.Serializable, Cloneable, Comparable<send_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("send_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new send_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new send_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        ThriftGeneralResponse success; // required
        public @org.apache.thrift.annotation.Nullable
        com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            E((short) 1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftGeneralResponse.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_result.class, metaDataMap);
        }

        public send_result() {
        }

        public send_result(
                ThriftGeneralResponse success,
                com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException e) {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public send_result(send_result other) {
            if (other.isSetSuccess()) {
                this.success = new ThriftGeneralResponse(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException(other.e);
            }
        }

        public send_result deepCopy() {
            return new send_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        @org.apache.thrift.annotation.Nullable
        public ThriftGeneralResponse getSuccess() {
            return this.success;
        }

        public send_result setSuccess(@org.apache.thrift.annotation.Nullable ThriftGeneralResponse success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException getE() {
            return this.e;
        }

        public send_result setE(@org.apache.thrift.annotation.Nullable com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((ThriftGeneralResponse) value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof send_result)
                return this.equals((send_result) that);
            return false;
        }

        public boolean equals(send_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(send_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("send_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class send_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public send_resultStandardScheme getScheme() {
                return new send_resultStandardScheme();
            }
        }

        private static class send_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<send_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, send_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new ThriftGeneralResponse();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, send_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class send_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public send_resultTupleScheme getScheme() {
                return new send_resultTupleScheme();
            }
        }

        private static class send_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<send_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, send_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, send_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new ThriftGeneralResponse();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class listSend_args implements org.apache.thrift.TBase<listSend_args, listSend_args._Fields>, java.io.Serializable, Cloneable, Comparable<listSend_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listSend_args");

        private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.LIST, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listSend_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listSend_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        java.util.List<ThriftGeneralRequest> req; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            REQ((short) 1, "req");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // REQ
                        return REQ;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftGeneralRequest.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listSend_args.class, metaDataMap);
        }

        public listSend_args() {
        }

        public listSend_args(
                java.util.List<ThriftGeneralRequest> req) {
            this();
            this.req = req;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public listSend_args(listSend_args other) {
            if (other.isSetReq()) {
                java.util.List<ThriftGeneralRequest> __this__req = new java.util.ArrayList<ThriftGeneralRequest>(other.req.size());
                for (ThriftGeneralRequest other_element : other.req) {
                    __this__req.add(new ThriftGeneralRequest(other_element));
                }
                this.req = __this__req;
            }
        }

        public listSend_args deepCopy() {
            return new listSend_args(this);
        }

        @Override
        public void clear() {
            this.req = null;
        }

        public int getReqSize() {
            return (this.req == null) ? 0 : this.req.size();
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Iterator<ThriftGeneralRequest> getReqIterator() {
            return (this.req == null) ? null : this.req.iterator();
        }

        public void addToReq(ThriftGeneralRequest elem) {
            if (this.req == null) {
                this.req = new java.util.ArrayList<ThriftGeneralRequest>();
            }
            this.req.add(elem);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.List<ThriftGeneralRequest> getReq() {
            return this.req;
        }

        public listSend_args setReq(@org.apache.thrift.annotation.Nullable java.util.List<ThriftGeneralRequest> req) {
            this.req = req;
            return this;
        }

        public void unsetReq() {
            this.req = null;
        }

        /** Returns true if field req is set (has been assigned a value) and false otherwise */
        public boolean isSetReq() {
            return this.req != null;
        }

        public void setReqIsSet(boolean value) {
            if (!value) {
                this.req = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case REQ:
                    if (value == null) {
                        unsetReq();
                    } else {
                        setReq((java.util.List<ThriftGeneralRequest>) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case REQ:
                    return getReq();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case REQ:
                    return isSetReq();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof listSend_args)
                return this.equals((listSend_args) that);
            return false;
        }

        public boolean equals(listSend_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_req = true && this.isSetReq();
            boolean that_present_req = true && that.isSetReq();
            if (this_present_req || that_present_req) {
                if (!(this_present_req && that_present_req))
                    return false;
                if (!this.req.equals(that.req))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetReq()) ? 131071 : 524287);
            if (isSetReq())
                hashCode = hashCode * 8191 + req.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(listSend_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReq()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, other.req);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("listSend_args(");
            boolean first = true;

            sb.append("req:");
            if (this.req == null) {
                sb.append("null");
            } else {
                sb.append(this.req);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class listSend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public listSend_argsStandardScheme getScheme() {
                return new listSend_argsStandardScheme();
            }
        }

        private static class listSend_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listSend_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, listSend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // REQ
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                                    struct.req = new java.util.ArrayList<ThriftGeneralRequest>(_list20.size);
                                    @org.apache.thrift.annotation.Nullable ThriftGeneralRequest _elem21;
                                    for (int _i22 = 0; _i22 < _list20.size; ++_i22) {
                                        _elem21 = new ThriftGeneralRequest();
                                        _elem21.read(iprot);
                                        struct.req.add(_elem21);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setReqIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, listSend_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.req != null) {
                    oprot.writeFieldBegin(REQ_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.req.size()));
                        for (ThriftGeneralRequest _iter23 : struct.req) {
                            _iter23.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class listSend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public listSend_argsTupleScheme getScheme() {
                return new listSend_argsTupleScheme();
            }
        }

        private static class listSend_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listSend_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, listSend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetReq()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetReq()) {
                    {
                        oprot.writeI32(struct.req.size());
                        for (ThriftGeneralRequest _iter24 : struct.req) {
                            _iter24.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, listSend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.req = new java.util.ArrayList<ThriftGeneralRequest>(_list25.size);
                        @org.apache.thrift.annotation.Nullable ThriftGeneralRequest _elem26;
                        for (int _i27 = 0; _i27 < _list25.size; ++_i27) {
                            _elem26 = new ThriftGeneralRequest();
                            _elem26.read(iprot);
                            struct.req.add(_elem26);
                        }
                    }
                    struct.setReqIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class listSend_result implements org.apache.thrift.TBase<listSend_result, listSend_result._Fields>, java.io.Serializable, Cloneable, Comparable<listSend_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listSend_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listSend_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listSend_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        java.util.List<ThriftGeneralResponse> success; // required
        public @org.apache.thrift.annotation.Nullable
        com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            E((short) 1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftGeneralResponse.class))));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listSend_result.class, metaDataMap);
        }

        public listSend_result() {
        }

        public listSend_result(
                java.util.List<ThriftGeneralResponse> success,
                com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException e) {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public listSend_result(listSend_result other) {
            if (other.isSetSuccess()) {
                java.util.List<ThriftGeneralResponse> __this__success = new java.util.ArrayList<ThriftGeneralResponse>(other.success.size());
                for (ThriftGeneralResponse other_element : other.success) {
                    __this__success.add(new ThriftGeneralResponse(other_element));
                }
                this.success = __this__success;
            }
            if (other.isSetE()) {
                this.e = new com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException(other.e);
            }
        }

        public listSend_result deepCopy() {
            return new listSend_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Iterator<ThriftGeneralResponse> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(ThriftGeneralResponse elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<ThriftGeneralResponse>();
            }
            this.success.add(elem);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.List<ThriftGeneralResponse> getSuccess() {
            return this.success;
        }

        public listSend_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<ThriftGeneralResponse> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException getE() {
            return this.e;
        }

        public listSend_result setE(@org.apache.thrift.annotation.Nullable com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<ThriftGeneralResponse>) value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof listSend_result)
                return this.equals((listSend_result) that);
            return false;
        }

        public boolean equals(listSend_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(listSend_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("listSend_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class listSend_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public listSend_resultStandardScheme getScheme() {
                return new listSend_resultStandardScheme();
            }
        }

        private static class listSend_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listSend_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, listSend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<ThriftGeneralResponse>(_list28.size);
                                    @org.apache.thrift.annotation.Nullable ThriftGeneralResponse _elem29;
                                    for (int _i30 = 0; _i30 < _list28.size; ++_i30) {
                                        _elem29 = new ThriftGeneralResponse();
                                        _elem29.read(iprot);
                                        struct.success.add(_elem29);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, listSend_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (ThriftGeneralResponse _iter31 : struct.success) {
                            _iter31.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class listSend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public listSend_resultTupleScheme getScheme() {
                return new listSend_resultTupleScheme();
            }
        }

        private static class listSend_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listSend_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, listSend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (ThriftGeneralResponse _iter32 : struct.success) {
                            _iter32.write(oprot);
                        }
                    }
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, listSend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<ThriftGeneralResponse>(_list33.size);
                        @org.apache.thrift.annotation.Nullable ThriftGeneralResponse _elem34;
                        for (int _i35 = 0; _i35 < _list33.size; ++_i35) {
                            _elem34 = new ThriftGeneralResponse();
                            _elem34.read(iprot);
                            struct.success.add(_elem34);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.github.okzhu.tools.thrift.api.exception.ThriftGeneralException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class voidSend_args implements org.apache.thrift.TBase<voidSend_args, voidSend_args._Fields>, java.io.Serializable, Cloneable, Comparable<voidSend_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voidSend_args");

        private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new voidSend_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new voidSend_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable
        ThriftGeneralRequest req; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            REQ((short) 1, "req");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // REQ
                        return REQ;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftGeneralRequest.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voidSend_args.class, metaDataMap);
        }

        public voidSend_args() {
        }

        public voidSend_args(
                ThriftGeneralRequest req) {
            this();
            this.req = req;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public voidSend_args(voidSend_args other) {
            if (other.isSetReq()) {
                this.req = new ThriftGeneralRequest(other.req);
            }
        }

        public voidSend_args deepCopy() {
            return new voidSend_args(this);
        }

        @Override
        public void clear() {
            this.req = null;
        }

        @org.apache.thrift.annotation.Nullable
        public ThriftGeneralRequest getReq() {
            return this.req;
        }

        public voidSend_args setReq(@org.apache.thrift.annotation.Nullable ThriftGeneralRequest req) {
            this.req = req;
            return this;
        }

        public void unsetReq() {
            this.req = null;
        }

        /** Returns true if field req is set (has been assigned a value) and false otherwise */
        public boolean isSetReq() {
            return this.req != null;
        }

        public void setReqIsSet(boolean value) {
            if (!value) {
                this.req = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case REQ:
                    if (value == null) {
                        unsetReq();
                    } else {
                        setReq((ThriftGeneralRequest) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case REQ:
                    return getReq();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case REQ:
                    return isSetReq();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof voidSend_args)
                return this.equals((voidSend_args) that);
            return false;
        }

        public boolean equals(voidSend_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_req = true && this.isSetReq();
            boolean that_present_req = true && that.isSetReq();
            if (this_present_req || that_present_req) {
                if (!(this_present_req && that_present_req))
                    return false;
                if (!this.req.equals(that.req))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetReq()) ? 131071 : 524287);
            if (isSetReq())
                hashCode = hashCode * 8191 + req.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(voidSend_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReq()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, other.req);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("voidSend_args(");
            boolean first = true;

            sb.append("req:");
            if (this.req == null) {
                sb.append("null");
            } else {
                sb.append(this.req);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (req != null) {
                req.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class voidSend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public voidSend_argsStandardScheme getScheme() {
                return new voidSend_argsStandardScheme();
            }
        }

        private static class voidSend_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<voidSend_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, voidSend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // REQ
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.req = new ThriftGeneralRequest();
                                struct.req.read(iprot);
                                struct.setReqIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, voidSend_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.req != null) {
                    oprot.writeFieldBegin(REQ_FIELD_DESC);
                    struct.req.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class voidSend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public voidSend_argsTupleScheme getScheme() {
                return new voidSend_argsTupleScheme();
            }
        }

        private static class voidSend_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<voidSend_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, voidSend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetReq()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetReq()) {
                    struct.req.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, voidSend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.req = new ThriftGeneralRequest();
                    struct.req.read(iprot);
                    struct.setReqIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class voidSend_result implements org.apache.thrift.TBase<voidSend_result, voidSend_result._Fields>, java.io.Serializable, Cloneable, Comparable<voidSend_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voidSend_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new voidSend_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new voidSend_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voidSend_result.class, metaDataMap);
        }

        public voidSend_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public voidSend_result(voidSend_result other) {
        }

        public voidSend_result deepCopy() {
            return new voidSend_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof voidSend_result)
                return this.equals((voidSend_result) that);
            return false;
        }

        public boolean equals(voidSend_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(voidSend_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("voidSend_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class voidSend_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public voidSend_resultStandardScheme getScheme() {
                return new voidSend_resultStandardScheme();
            }
        }

        private static class voidSend_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<voidSend_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, voidSend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, voidSend_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class voidSend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public voidSend_resultTupleScheme getScheme() {
                return new voidSend_resultTupleScheme();
            }
        }

        private static class voidSend_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<voidSend_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, voidSend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, voidSend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
