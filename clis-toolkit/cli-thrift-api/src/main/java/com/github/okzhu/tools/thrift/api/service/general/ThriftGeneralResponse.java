/**
 * Autogenerated by Thrift Compiler (0.13.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.github.okzhu.tools.thrift.api.service.general;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-16")
public class ThriftGeneralResponse implements org.apache.thrift.TBase<ThriftGeneralResponse, ThriftGeneralResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftGeneralResponse> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftGeneralResponse");

    private static final org.apache.thrift.protocol.TField HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("headers", org.apache.thrift.protocol.TType.MAP, (short) 1);
    private static final org.apache.thrift.protocol.TField STATUS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusCode", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftGeneralResponseStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftGeneralResponseTupleSchemeFactory();

    /**
     * 就是HTTP的返回头。你 http 是什么这个就是什么，
     * 比如你要在头里面设置 cookies 也是在这里
     */
    public @org.apache.thrift.annotation.Nullable
    java.util.Map<java.lang.String, java.lang.String> headers; // required
    /**
     * 就是HTTP的返回 状态码。你 http 是什么这个就是什么，
     */
    public int statusCode; // required
    /**
     * 就是HTTP的返回 内容。你 http 是什么这个就是什么，
     */
    public @org.apache.thrift.annotation.Nullable
    java.lang.String body; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        /**
         * 就是HTTP的返回头。你 http 是什么这个就是什么，
         * 比如你要在头里面设置 cookies 也是在这里
         */
        HEADERS((short) 1, "headers"),
        /**
         * 就是HTTP的返回 状态码。你 http 是什么这个就是什么，
         */
        STATUS_CODE((short) 2, "statusCode"),
        /**
         * 就是HTTP的返回 内容。你 http 是什么这个就是什么，
         */
        BODY((short) 3, "body");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // HEADERS
                    return HEADERS;
                case 2: // STATUS_CODE
                    return STATUS_CODE;
                case 3: // BODY
                    return BODY;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __STATUSCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.BODY};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.HEADERS, new org.apache.thrift.meta_data.FieldMetaData("headers", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.STATUS_CODE, new org.apache.thrift.meta_data.FieldMetaData("statusCode", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftGeneralResponse.class, metaDataMap);
    }

    public ThriftGeneralResponse() {
    }

    public ThriftGeneralResponse(
            java.util.Map<java.lang.String, java.lang.String> headers,
            int statusCode) {
        this();
        this.headers = headers;
        this.statusCode = statusCode;
        setStatusCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ThriftGeneralResponse(ThriftGeneralResponse other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetHeaders()) {
            java.util.Map<java.lang.String, java.lang.String> __this__headers = new java.util.HashMap<java.lang.String, java.lang.String>(other.headers);
            this.headers = __this__headers;
        }
        this.statusCode = other.statusCode;
        if (other.isSetBody()) {
            this.body = other.body;
        }
    }

    public ThriftGeneralResponse deepCopy() {
        return new ThriftGeneralResponse(this);
    }

    @Override
    public void clear() {
        this.headers = null;
        setStatusCodeIsSet(false);
        this.statusCode = 0;
        this.body = null;
    }

    public int getHeadersSize() {
        return (this.headers == null) ? 0 : this.headers.size();
    }

    public void putToHeaders(java.lang.String key, java.lang.String val) {
        if (this.headers == null) {
            this.headers = new java.util.HashMap<java.lang.String, java.lang.String>();
        }
        this.headers.put(key, val);
    }

    /**
     * 就是HTTP的返回头。你 http 是什么这个就是什么，
     * 比如你要在头里面设置 cookies 也是在这里
     */
    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String, java.lang.String> getHeaders() {
        return this.headers;
    }

    /**
     * 就是HTTP的返回头。你 http 是什么这个就是什么，
     * 比如你要在头里面设置 cookies 也是在这里
     */
    public ThriftGeneralResponse setHeaders(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.String> headers) {
        this.headers = headers;
        return this;
    }

    public void unsetHeaders() {
        this.headers = null;
    }

    /** Returns true if field headers is set (has been assigned a value) and false otherwise */
    public boolean isSetHeaders() {
        return this.headers != null;
    }

    public void setHeadersIsSet(boolean value) {
        if (!value) {
            this.headers = null;
        }
    }

    /**
     * 就是HTTP的返回 状态码。你 http 是什么这个就是什么，
     */
    public int getStatusCode() {
        return this.statusCode;
    }

    /**
     * 就是HTTP的返回 状态码。你 http 是什么这个就是什么，
     */
    public ThriftGeneralResponse setStatusCode(int statusCode) {
        this.statusCode = statusCode;
        setStatusCodeIsSet(true);
        return this;
    }

    public void unsetStatusCode() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSCODE_ISSET_ID);
    }

    /** Returns true if field statusCode is set (has been assigned a value) and false otherwise */
    public boolean isSetStatusCode() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSCODE_ISSET_ID);
    }

    public void setStatusCodeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSCODE_ISSET_ID, value);
    }

    /**
     * 就是HTTP的返回 内容。你 http 是什么这个就是什么，
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBody() {
        return this.body;
    }

    /**
     * 就是HTTP的返回 内容。你 http 是什么这个就是什么，
     */
    public ThriftGeneralResponse setBody(@org.apache.thrift.annotation.Nullable java.lang.String body) {
        this.body = body;
        return this;
    }

    public void unsetBody() {
        this.body = null;
    }

    /** Returns true if field body is set (has been assigned a value) and false otherwise */
    public boolean isSetBody() {
        return this.body != null;
    }

    public void setBodyIsSet(boolean value) {
        if (!value) {
            this.body = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case HEADERS:
                if (value == null) {
                    unsetHeaders();
                } else {
                    setHeaders((java.util.Map<java.lang.String, java.lang.String>) value);
                }
                break;

            case STATUS_CODE:
                if (value == null) {
                    unsetStatusCode();
                } else {
                    setStatusCode((java.lang.Integer) value);
                }
                break;

            case BODY:
                if (value == null) {
                    unsetBody();
                } else {
                    setBody((java.lang.String) value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case HEADERS:
                return getHeaders();

            case STATUS_CODE:
                return getStatusCode();

            case BODY:
                return getBody();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case HEADERS:
                return isSetHeaders();
            case STATUS_CODE:
                return isSetStatusCode();
            case BODY:
                return isSetBody();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof ThriftGeneralResponse)
            return this.equals((ThriftGeneralResponse) that);
        return false;
    }

    public boolean equals(ThriftGeneralResponse that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_headers = true && this.isSetHeaders();
        boolean that_present_headers = true && that.isSetHeaders();
        if (this_present_headers || that_present_headers) {
            if (!(this_present_headers && that_present_headers))
                return false;
            if (!this.headers.equals(that.headers))
                return false;
        }

        boolean this_present_statusCode = true;
        boolean that_present_statusCode = true;
        if (this_present_statusCode || that_present_statusCode) {
            if (!(this_present_statusCode && that_present_statusCode))
                return false;
            if (this.statusCode != that.statusCode)
                return false;
        }

        boolean this_present_body = true && this.isSetBody();
        boolean that_present_body = true && that.isSetBody();
        if (this_present_body || that_present_body) {
            if (!(this_present_body && that_present_body))
                return false;
            if (!this.body.equals(that.body))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetHeaders()) ? 131071 : 524287);
        if (isSetHeaders())
            hashCode = hashCode * 8191 + headers.hashCode();

        hashCode = hashCode * 8191 + statusCode;

        hashCode = hashCode * 8191 + ((isSetBody()) ? 131071 : 524287);
        if (isSetBody())
            hashCode = hashCode * 8191 + body.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(ThriftGeneralResponse other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetHeaders()).compareTo(other.isSetHeaders());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetHeaders()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headers, other.headers);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetStatusCode()).compareTo(other.isSetStatusCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStatusCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusCode, other.statusCode);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBody()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftGeneralResponse(");
        boolean first = true;

        sb.append("headers:");
        if (this.headers == null) {
            sb.append("null");
        } else {
            sb.append(this.headers);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("statusCode:");
        sb.append(this.statusCode);
        first = false;
        if (isSetBody()) {
            if (!first) sb.append(", ");
            sb.append("body:");
            if (this.body == null) {
                sb.append("null");
            } else {
                sb.append(this.body);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ThriftGeneralResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ThriftGeneralResponseStandardScheme getScheme() {
            return new ThriftGeneralResponseStandardScheme();
        }
    }

    private static class ThriftGeneralResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftGeneralResponse> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftGeneralResponse struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // HEADERS
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                                struct.headers = new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map10.size);
                                @org.apache.thrift.annotation.Nullable java.lang.String _key11;
                                @org.apache.thrift.annotation.Nullable java.lang.String _val12;
                                for (int _i13 = 0; _i13 < _map10.size; ++_i13) {
                                    _key11 = iprot.readString();
                                    _val12 = iprot.readString();
                                    struct.headers.put(_key11, _val12);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setHeadersIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // STATUS_CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.statusCode = iprot.readI32();
                            struct.setStatusCodeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // BODY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.body = iprot.readString();
                            struct.setBodyIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftGeneralResponse struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.headers != null) {
                oprot.writeFieldBegin(HEADERS_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.headers.size()));
                    for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter14 : struct.headers.entrySet()) {
                        oprot.writeString(_iter14.getKey());
                        oprot.writeString(_iter14.getValue());
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(STATUS_CODE_FIELD_DESC);
            oprot.writeI32(struct.statusCode);
            oprot.writeFieldEnd();
            if (struct.body != null) {
                if (struct.isSetBody()) {
                    oprot.writeFieldBegin(BODY_FIELD_DESC);
                    oprot.writeString(struct.body);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ThriftGeneralResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ThriftGeneralResponseTupleScheme getScheme() {
            return new ThriftGeneralResponseTupleScheme();
        }
    }

    private static class ThriftGeneralResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftGeneralResponse> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ThriftGeneralResponse struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetHeaders()) {
                optionals.set(0);
            }
            if (struct.isSetStatusCode()) {
                optionals.set(1);
            }
            if (struct.isSetBody()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetHeaders()) {
                {
                    oprot.writeI32(struct.headers.size());
                    for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter15 : struct.headers.entrySet()) {
                        oprot.writeString(_iter15.getKey());
                        oprot.writeString(_iter15.getValue());
                    }
                }
            }
            if (struct.isSetStatusCode()) {
                oprot.writeI32(struct.statusCode);
            }
            if (struct.isSetBody()) {
                oprot.writeString(struct.body);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ThriftGeneralResponse struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                {
                    org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.headers = new java.util.HashMap<java.lang.String, java.lang.String>(2 * _map16.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _key17;
                    @org.apache.thrift.annotation.Nullable java.lang.String _val18;
                    for (int _i19 = 0; _i19 < _map16.size; ++_i19) {
                        _key17 = iprot.readString();
                        _val18 = iprot.readString();
                        struct.headers.put(_key17, _val18);
                    }
                }
                struct.setHeadersIsSet(true);
            }
            if (incoming.get(1)) {
                struct.statusCode = iprot.readI32();
                struct.setStatusCodeIsSet(true);
            }
            if (incoming.get(2)) {
                struct.body = iprot.readString();
                struct.setBodyIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

